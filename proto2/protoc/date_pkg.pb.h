// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: date_pkg.proto

#ifndef PROTOBUF_INCLUDED_date_5fpkg_2eproto
#define PROTOBUF_INCLUDED_date_5fpkg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_date_5fpkg_2eproto

namespace protobuf_date_5fpkg_2eproto
{
// Internal implementation detail -- do not use these members.
struct TableStruct
{
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[1];
    static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    static const ::google::protobuf::internal::SerializationTable serialization_table[];
    static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
} // namespace protobuf_date_5fpkg_2eproto
namespace date
{
namespace module
{
class Date;
class DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
} // namespace module
} // namespace date
namespace google
{
namespace protobuf
{
template <>::date::module::Date *Arena::CreateMaybeMessage<::date::module::Date>(Arena *);
} // namespace protobuf
} // namespace google
namespace date
{
namespace module
{

// ===================================================================

class Date : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:date.module.Date) */
{
  public:
    Date();
    virtual ~Date();

    Date(const Date &from);

    inline Date &operator=(const Date &from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Date(Date &&from) noexcept : Date()
    {
        *this = ::std::move(from);
    }

    inline Date &operator=(Date &&from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const
    {
        return _internal_metadata_.unknown_fields();
    }
    inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields()
    {
        return _internal_metadata_.mutable_unknown_fields();
    }

    static const ::google::protobuf::Descriptor *descriptor();
    static const Date &default_instance();

    static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
    static inline const Date *internal_default_instance()
    {
        return reinterpret_cast<const Date *>(&_Date_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    void Swap(Date *other);
    friend void swap(Date &a, Date &b)
    {
        a.Swap(&b);
    }

    // implements Message ----------------------------------------------

    inline Date *New() const final
    {
        return CreateMaybeMessage<Date>(NULL);
    }

    Date *New(::google::protobuf::Arena *arena) const final
    {
        return CreateMaybeMessage<Date>(arena);
    }
    void CopyFrom(const ::google::protobuf::Message &from) final;
    void MergeFrom(const ::google::protobuf::Message &from) final;
    void CopyFrom(const Date &from);
    void MergeFrom(const Date &from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream *output) const final;
    ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8 *target) const final;
    int GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Date *other);

  private:
    inline ::google::protobuf::Arena *GetArenaNoVirtual() const
    {
        return NULL;
    }
    inline void *MaybeArenaPtr() const
    {
        return NULL;
    }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // optional int32 year = 1;
    bool has_year() const;
    void clear_year();
    static const int kYearFieldNumber = 1;
    ::google::protobuf::int32 year() const;
    void set_year(::google::protobuf::int32 value);

    // optional int32 month = 2;
    bool has_month() const;
    void clear_month();
    static const int kMonthFieldNumber = 2;
    ::google::protobuf::int32 month() const;
    void set_month(::google::protobuf::int32 value);

    // optional int32 day = 3;
    bool has_day() const;
    void clear_day();
    static const int kDayFieldNumber = 3;
    ::google::protobuf::int32 day() const;
    void set_day(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:date.module.Date)
  private:
    void set_has_year();
    void clear_has_year();
    void set_has_month();
    void clear_has_month();
    void set_has_day();
    void clear_has_day();

    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::int32 year_;
    ::google::protobuf::int32 month_;
    ::google::protobuf::int32 day_;
    friend struct ::protobuf_date_5fpkg_2eproto::TableStruct;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// Date

// optional int32 year = 1;
inline bool Date::has_year() const
{
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Date::set_has_year()
{
    _has_bits_[0] |= 0x00000001u;
}
inline void Date::clear_has_year()
{
    _has_bits_[0] &= ~0x00000001u;
}
inline void Date::clear_year()
{
    year_ = 0;
    clear_has_year();
}
inline ::google::protobuf::int32 Date::year() const
{
    // @@protoc_insertion_point(field_get:date.module.Date.year)
    return year_;
}
inline void Date::set_year(::google::protobuf::int32 value)
{
    set_has_year();
    year_ = value;
    // @@protoc_insertion_point(field_set:date.module.Date.year)
}

// optional int32 month = 2;
inline bool Date::has_month() const
{
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Date::set_has_month()
{
    _has_bits_[0] |= 0x00000002u;
}
inline void Date::clear_has_month()
{
    _has_bits_[0] &= ~0x00000002u;
}
inline void Date::clear_month()
{
    month_ = 0;
    clear_has_month();
}
inline ::google::protobuf::int32 Date::month() const
{
    // @@protoc_insertion_point(field_get:date.module.Date.month)
    return month_;
}
inline void Date::set_month(::google::protobuf::int32 value)
{
    set_has_month();
    month_ = value;
    // @@protoc_insertion_point(field_set:date.module.Date.month)
}

// optional int32 day = 3;
inline bool Date::has_day() const
{
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Date::set_has_day()
{
    _has_bits_[0] |= 0x00000004u;
}
inline void Date::clear_has_day()
{
    _has_bits_[0] &= ~0x00000004u;
}
inline void Date::clear_day()
{
    day_ = 0;
    clear_has_day();
}
inline ::google::protobuf::int32 Date::day() const
{
    // @@protoc_insertion_point(field_get:date.module.Date.day)
    return day_;
}
inline void Date::set_day(::google::protobuf::int32 value)
{
    set_has_day();
    day_ = value;
    // @@protoc_insertion_point(field_set:date.module.Date.day)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

// @@protoc_insertion_point(namespace_scope)

} // namespace module
} // namespace date

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_INCLUDED_date_5fpkg_2eproto
